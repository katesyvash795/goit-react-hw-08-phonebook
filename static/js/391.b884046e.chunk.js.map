{"version":3,"file":"static/js/391.b884046e.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contact-filter/selectors.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.js","components/Filters/Filters.styled.js","components/Filters/Filters.js","components/Error/Error.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, Form } from 'formik';\nexport const FormContainer = styled.div`\ndisplay: flex;\n    flex-direction: column;\n    background-color: #d9d9d9;\n    padding: 50px;\n    border-radius: 10px;\n    width: 400px;\n    margin: 0 auto;\n    `;\n\nexport const Label = styled.label`\n  margin-bottom: 5px;\n`;\nexport const StyleForm = styled(Form)`\n  flex-direction: column;\n  align-items: center;\n  justyfy-content: center;\n  display: flex;\n`;\nexport const InputField = styled(Field)`\n  padding: 5px;\n  margin-bottom: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n`;\n\nexport const SubmitButton = styled.button`\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n\n  &:hover {\n    background-color: #014287;\n  }\n`;\n","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilters= state=>state.filter;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contact-filter/operation';\nimport { Formik } from 'formik';\nimport toast, { Toaster } from 'react-hot-toast';\nimport {\n  Label,\n  FormContainer,\n  InputField,\n  SubmitButton,\n  StyleForm,\n} from './ContactForm.styled';\nimport { getContacts } from 'redux/contact-filter/selectors';\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n \n  const handleSubmitForm = (values, { resetForm }) => {\n    const { name, number } = values;\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase() \n      )\n    ) {\n      toast.error(`${name} already exists.`);\n      resetForm();\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    toast.success(`${name} added`);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmitForm}\n    >\n      {({ handleSubmit }) => (\n        <FormContainer>\n          <StyleForm onSubmit={handleSubmit}>\n            <Label htmlFor=\"name\">Name:</Label>\n            <InputField\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              required\n            />\n            <Label htmlFor=\"number\">Number:</Label>\n            <InputField\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              required\n            />\n            <SubmitButton type=\"submit\">Add Contact</SubmitButton>\n            <Toaster />\n          </StyleForm>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n}\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  width: 400px;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 10px 0;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`;\n\nexport const DeleteButton = styled.button`\npadding: 10px 20px;\nbackground-color: #e30b0b;\ncolor: #fff;\nborder: none;\ntext-decoration: none;\nborder-radius: 4px;\ncursor: pointer;\nfont-size: 16px;\n\n&:hover {\n  background-color:#9d0000;\n}\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contact-filter/operation';\nimport { List, ListItem, DeleteButton } from './ContactsList.styled';\nimport { getContacts, getFilters } from 'redux/contact-filter/selectors';\n\nfunction ContactList() {\n  const contacts = useSelector(getContacts);\n  const filters = useSelector(getFilters);\n  const dispatch = useDispatch();\n\nconst filteredContacts = contacts.filter((contact) =>\n  contact.name.toLowerCase().includes(filters.toLowerCase())\n);\n\n\n  const handleDelete = (contactId) => {\n    dispatch(deleteContact(contactId));\n  };\n  return (\n    <List>\n      {filteredContacts.map((contact) => (\n        <ListItem key={contact.id}>\n          <div>\n            <b>{contact.name}:</b> {contact.number}\n          </div>\n          <DeleteButton onClick={() => handleDelete(contact.id)}>\n            Delete\n          </DeleteButton>\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import styled from 'styled-components';\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  margin-bottom: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n`;\n\nexport const ResetButton = styled.button`\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n\n  &:hover {\n    background-color: #014287;\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeValueFilter } from 'redux/contact-filter/filtersSlice';\nimport { FilterContainer, Label, Input, ResetButton } from './Filters.styled';\nimport { getFilters } from 'redux/contact-filter/selectors';\n\nfunction Filter() {\n  const filter = useSelector(getFilters);\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => {\n    dispatch(changeValueFilter(evt.currentTarget.value));\n  };\n\n  const resetFilters = () => {\n    dispatch(changeValueFilter(''));\n  };\n\n  return (\n    <FilterContainer>\n      <Label>Filter contacts by name:</Label>\n      <Input type=\"text\" name=\"filter\" value={filter} onChange={changeFilter} />\n      <ResetButton type=\"button\" onClick={resetFilters}>\n        Reset filters\n      </ResetButton>\n    </FilterContainer>\n  );\n}\n\nexport default Filter;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Error = () => {\n    return (\n      <div >\n        <h1 margin=\"20px\">Error</h1>\n        <FontAwesomeIcon icon={faTimesCircle} size=\"3x\" color=\"red\" />\n      </div>\n    );\n  };\n  \n  export default Error;","import { fetchContacts } from 'redux/contact-filter/operation';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactsList/ContactsList';\nimport Filter from '../components/Filters/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getError, getIsLoading } from 'redux/contact-filter/selectors';\nimport RoundSpinner from '../components/Loading/Loading';\nimport Error from '../components/Error/Error';\n\nfunction Contacts() {\n  // const token = useSelector(state => state.auth.token);\n  const isLoading = useSelector(getIsLoading);\n  const isError=useSelector(getError)\n  // console.log('Token:', token);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <center>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && !isError &&<RoundSpinner/>}\n        {isError && !isLoading && <Error/>}\n        {!isLoading && !isError &&  <ContactList />}\n      </center>\n    </div>\n  );\n}\n\nexport default Contacts;\n"],"names":["FormContainer","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","StyleForm","Form","_templateObject3","InputField","Field","_templateObject4","SubmitButton","_templateObject5","getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilters","filter","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","name","number","onSubmit","values","_ref","resetForm","find","contact","toLowerCase","toast","concat","addContact","children","_ref2","handleSubmit","_jsxs","htmlFor","type","pattern","required","Toaster","List","ListItem","DeleteButton","filters","filteredContacts","includes","map","onClick","contactId","id","deleteContact","FilterContainer","Input","ResetButton","value","onChange","evt","changeValueFilter","currentTarget","margin","FontAwesomeIcon","icon","faTimesCircle","size","color","isError","useEffect","fetchContacts","ContactForm","Filter","RoundSpinner","Error","ContactList"],"sourceRoot":""}